package ciknow.recommend;

import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Collections;
import ciknow.UnsupportedOperationException;
import ciknow.domain.Node;
import ciknow.domain.Recommendation;
import ciknow.dao.NodeDao;
import ciknow.util.Beans;
import ciknow.util.Constants;
import ciknow.util.PropsUtil;
import org.apache.log4j.Logger;

public class PearsonGeodesicRecommender extends AbstractRecommender implements Recommender {
	private static Logger logger = Logger.getLogger(PearsonGeodesicRecommender.class);
	private String datasource;

	public static void main(String[] args) {

	}

	public PearsonGeodesicRecommender() {
		super("pearson.geodesic");
		PropsUtil prop = PropsUtil.getInstance("ciknow");
		this.datasource = prop.get("recommender.datasource");
	}

    public List<Recommendation> getRecommendations(Node node, Collection<Node> targets, int numRecs, int operator) throws UnsupportedOperationException{
        double[] args = {};  // default parameters
        return getRecommendations(node, targets, numRecs, operator, args);
    }

    public List<Recommendation> getRecommendations(
			Node node, Collection<Node> targets, int numRecs, int operator, double... args){
		logger.info("get Recommendations ...");
		
		List<Recommendation> recs = new LinkedList<Recommendation>();
		if (node == null || targets == null || targets.size() == 0) return recs;

		logger.debug("get similar items to search term/targets");
		Map<Long, Float> identificationMap = getSimilarityScoreMap(targets, Constants.ALG_PEARSON, datasource, operator);

		logger.debug("get euclidean distance from user to items");
		Map<Long, Float> selectionMap = getGeodesic(node);
		
		logger.debug("similarity/distance --> recommendation");
		recs = formulate(node, identificationMap, selectionMap);
		logger.info("there are " + recs.size() + " raw recommendations.");

		logger.debug("rescoring/filtering...");
		compact(recs, 0.0000000001f);

		logger.debug("sort, truncate, normalize...");
		Collections.sort(recs, new RecommendationComparator());		
		if (recs.size() > numRecs) {
			recs = recs.subList(0, numRecs);
		}

		logger.debug("got " + recs.size() + " recommendations.");
		return recs;
	}
	
	private List<Recommendation> formulate(
			Node node, Map<Long, Float> identificationMap, Map<Long, Float> selectionMap) {
		
		float max_identification_distance = getMax(identificationMap);
		float max_selection_distance = getMax(selectionMap);
		logger.info("maximum distance from recommended items to search term: " + max_identification_distance);
		logger.info("maximum distance from recommended items to user: " + max_selection_distance);

		Beans.init();
		NodeDao nodeDao = (NodeDao)Beans.getBean("nodeHibernateDao");
		List<Recommendation> recs = new ArrayList<Recommendation>();
		for (Long recommended : identificationMap.keySet()) {
			Float identification_distance = identificationMap.get(recommended);
			Float selection_distance = selectionMap.get(recommended);
			
			if (selection_distance != null && selection_distance > 0) {
				double identification_similarity = identification_distance;
				double selection_similarity = selection_distance;
				double score = identification_similarity / selection_similarity;
				
				Recommendation rec = new Recommendation();
				rec.setUser(node);
				rec.setTarget(nodeDao.findById(recommended));
				rec.setIdentifyScore(identification_similarity);
				rec.setSelectScore(selection_similarity);
				rec.setFinalScore(score);
				recs.add(rec);
			}
		}
		return recs;
	}


	/////////////////////// INTENTIONALLY UNSUPPORTED ////////////////////////
	public List<Recommendation> getRecommendations(Node node)
			throws UnsupportedOperationException {
		throw new UnsupportedOperationException();
	}

	public List<Recommendation> getRecommendations(Node node, int numRecs)
			throws UnsupportedOperationException {
		throw new UnsupportedOperationException();
	}

}
