package ciknow.zk.composite.popup;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.zkoss.zk.ui.Executions;
import org.zkoss.zk.ui.select.Selectors;
import org.zkoss.zk.ui.select.annotation.Listen;
import org.zkoss.zk.ui.select.annotation.VariableResolver;
import org.zkoss.zk.ui.select.annotation.Wire;
import org.zkoss.zul.Div;
import org.zkoss.zul.Messagebox;
import org.zkoss.zul.Textbox;
import org.zkoss.zul.Window;

import ciknow.zk.composite.AbstractQuestion;

@VariableResolver(org.zkoss.zkplus.spring.DelegatingVariableResolver.class)
public class GetOtherWindow extends Window {
	private static final long serialVersionUID = -3902957071713495757L;

	private static Log logger = LogFactory.getLog(GetOtherWindow.class);
	
	private AbstractQuestion qc;
	
	@Wire private Textbox otherBox;
	
	public GetOtherWindow(AbstractQuestion qc){
		this.qc = qc;
		
		// create UI from template
		Executions.createComponents("/WEB-INF/zk/survey/response/GetOtherWindow.zul", this, null);
		this.setClosable(true);
		
		Selectors.wireVariables(this, this, Selectors.newVariableResolvers(getClass(), Div.class));
		Selectors.wireComponents(this, this, false);
		Selectors.wireEventListeners(this, this);
	}
	
	@Listen("onClick = #saveBtn")
	public void save() throws Exception{
		AbstractQuestion parent = (AbstractQuestion)getParent();
		
		String other = otherBox.getValue().trim();
		if (other.isEmpty()) {
			Messagebox.show("Empty is not accpted.");
			return;
		} else {
			parent.gotOtherInfo(other);
		}
		
		qc.removeChild(this);
		
		logger.debug("respondent: " + parent.getRespondent().getLabel() 
				+ ", question: " + parent.getQuestion().getLabel() 
				+ ", other: " + other);
	}
	
	@Listen("onClick = #cancelBtn")
	public void cancel() throws Exception{
		qc.gotOtherInfo(null);
		qc.removeChild(this);
	}
}
